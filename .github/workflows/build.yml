name: Build and Push Multi-Arch Docker Image

on:
  schedule:
    - cron: '0 8 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: bra-fsn/actions-runner

jobs:
  get-latest-runner-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Get latest GitHub Runner version
        id: get-version
        run: |
          # Get the latest version from GitHub API
          LATEST_VERSION=$(curl -s https://api.github.com/repos/actions/runner/releases/latest | jq -r '.tag_name' | sed 's/v//')
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "Latest runner version: $LATEST_VERSION"

  build-and-push:
    needs: get-latest-runner-version
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract and build Docker image
        run: |
          RUNNER_VERSION=${{ needs.get-latest-runner-version.outputs.version }}
          echo "Building runner version: $RUNNER_VERSION"
          
          # Download and extract the runner source on the fly
          curl -sL "https://github.com/actions/runner/archive/refs/tags/v${RUNNER_VERSION}.tar.gz" | tar -xz
          
          # Navigate to the images directory
          cd "runner-${RUNNER_VERSION}/images"
          
          # Update Dockerfile to use Ubuntu 9.0 (Noble)
          sed -i 's/8.0-jammy/9.0-noble/g' Dockerfile
          
          # Build multi-architecture image with caching
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg RUNNER_VERSION="${RUNNER_VERSION}" \
            --tag "${REGISTRY}/${IMAGE_NAME}:${RUNNER_VERSION}" \
            --tag "${REGISTRY}/${IMAGE_NAME}:latest" \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --push \
            .